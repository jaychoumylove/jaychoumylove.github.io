<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>浅谈前后端请求加密与签名</title>
    <url>/2020/06/28/http-request/</url>
    <content><![CDATA[<blockquote>
<p>最近在做服务请求加密相关的工作，于此记录下一些资料。</p>
</blockquote>
<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>网络中的请求安全问题一般有两个方面：</p>
<ul>
<li>请求安全性：即服务端收到你的请求时，需要鉴别请求是否有效</li>
<li>数据保密性：请求数据可能会被抓包，为避免用户敏感数据被窃取，需要进行数据加密。</li>
</ul>
<a id="more"></a>

<h4 id="请求唯一性-once-time-timestamp"><a href="#请求唯一性-once-time-timestamp" class="headerlink" title="请求唯一性 - once, time|timestamp"></a>请求唯一性 - once, time|timestamp</h4><p>这个主要是为了防止无限制重复请求。<br>我们可以给请求加一个<code>once</code>字段(<code>一个随机{数|字符串}</code>)，每次接受请求时，检查<code>once</code>是否存在，不存在直接拒绝。如果存在的话，我们把这个<code>once</code>拿到缓存库去找，找得到，说明已经被使用过，拒绝该次请求；找不到，记录请求信息，把<code>once</code>写入到缓存中，正常执行。</p>
<p>但是这样无限制的往缓存里面塞请求数据信息的话，对于流量大的网站，是不能接受的，总不能让缓存崩掉吧。所以每一个<code>once</code>缓存都会设置过期时间，这个时间根据你的并发量决定(比如<code>5 mins</code>)，并发量高设置的时间就短，反之就长一点。</p>
<p>依靠缓存的自动过期还是很单一的，所以我们会在请求加上<code>time|timestamp</code>字段<code>一个时间戳</code>，服务器接收这个请求的时候，取出<code>time</code>，如果服务端的当前时间戳与<code>time</code>的差值大于过期时间的话，就直接拒绝该次请求；否则就进行下一步处理，如检查<code>once</code>。</p>
<h4 id="请求一致性-数据安全-sign"><a href="#请求一致性-数据安全-sign" class="headerlink" title="请求一致性|数据安全 - sign"></a>请求一致性|数据安全 - sign</h4><p>主要用于数据防串改。<br>服务端和客户端约定一个签名生成算法，客户端请求前，调用签名算法，生成<code>sign</code>，并且把<code>sign</code>和请求参数一起发送给服务器。服务器拿到请求的时候，把<code>sign</code>单独提取出来，用签名算法对其他请求参数进行签名，如果生成的签名和<code>sign</code>一致，说明数据没有被串改，可以进行下一步处理。<br>主要的算法：</p>
<ul>
<li><code>MD5</code><ul>
<li>是信息摘要算法，<strong><em>不是加密算法</em></strong></li>
<li>加密算法是可以解密的，换言之，我加密之后我是需要知道加密的内容的（可解密）。</li>
<li>但是<code>MD5</code>是不可逆的，没哟解密的说法，所以<code>MD5</code>是可以用来生成唯一数据，校验数据是否被串改的（<code>sha-1</code>类似）。</li>
</ul>
</li>
<li><code>Base64</code><ul>
<li>是编码规范，<strong><em>不是加密算法</em></strong></li>
<li>这货主要是为了处理网咯传输里面不支持和不可见字符的问题。（比如前端用<code>JavaScript</code>转义请求参数中空格的转义和后端某些语言对空格的转义不一致，这时候就会用到）</li>
<li>换言之，签名算法里面对数据的转义可以用</li>
</ul>
</li>
<li><code>aes</code><ul>
<li>对称加密算法</li>
<li>客服端和服务器端共同确定一个用来加密和解密的秘钥。然后客服端在请求服务器是通过该秘钥对数据进行加密，服务器端在接收到请求之后使用该秘钥对数据进行解密。</li>
<li>服务端和客户端需要公用一个秘钥，不安全。</li>
</ul>
</li>
<li><code>rsa</code><ul>
<li>非对称加密算法</li>
<li>服务器端生成公钥和私钥，把公钥发送给客户端。客服端在请求服务器是，通过公钥对数据进行加密。服务器端接收到请求之后，使用私钥对加密的数据进行解密。</li>
<li>虽然避免了泄露的隐患，但是加密数据较大时，效率低，且需要分段加密处理</li>
</ul>
</li>
</ul>
<p>一般来说，签名算法主要是保证数据的唯一性，你可以选用<code>MD5</code>和<code>Base64</code>。
一般是一下几种方式</p>
<ul>
<li>请求数据拼接</li>
<li>请求数据排序，一般按字母排序</li>
<li>请求数据加盐，一般是随机字符串和时间戳，会以明文方式请求服务端 </li>
<li>请求数据<code>base64</code>编码，防止转义字符</li>
<li>请求数据<code>md5</code>加密</li>
</ul>
<p>数据加密一般通过<code>rsa</code>算法利用公钥<code>rsa_pu</code>生成私钥<code>aes_key</code>，然后通过<code>aes</code>算法利用私钥<code>aes_key</code>对请求参数进行加密得到<code>secret_Data</code>，然后把公钥<code>rsa_pu</code>对私钥<code>aes_key</code>加密得到<code>secret_key</code>, 把<code>secret_Data</code>和<code>secret_key</code>一起发送给服务端，服务端通过私钥解密<code>secret_key</code>得到<code>aes_key</code>，然后通过<code>aes</code>算法利用<code>aes_key</code>解密<code>secret_Data</code>得到请求数据。反过来，服务端要返回保密的请求信息也是差不多的思路，</p>
<ul>
<li>利用非对称算法加密对称算法的秘钥生成秘钥密文，通过对称算法用私钥加密数据生成数据密文。</li>
<li>用非对称算法解密私钥密文得到私钥，通过对称算法用私钥解密数据密文得到加秘数据。</li>
</ul>
<h4 id="用户的身份认证-token-Authorization"><a href="#用户的身份认证-token-Authorization" class="headerlink" title="用户的身份认证 - token|Authorization"></a>用户的身份认证 - token|Authorization</h4><p>服务端需要知道发起者的身份信息。<br>这点就不用说了，一般我们会在用户登录之后返回给用户一个<code>token</code>，之后的每一次请求都带上这个<code>token</code>，服务端用过读取<code>token</code> 存取的信息鉴别用户身份。<br>主要的实现方式（我目前所接触到的）：</p>
<ul>
<li><code>cache</code><ul>
<li>把用户的铭感信息存入到缓存中，通过读取缓存信息鉴别用户身份。</li>
<li>实现简单，用户数据高度保密</li>
<li>占用缓存资源，可能会滥用缓存，可能会被对手利用，无限制刷缓存</li>
</ul>
</li>
<li><code>jwt</code><ul>
<li>通过<code>jwt</code>保存用户铭感信息至payload中。读取<code>payload</code>鉴别用户信息</li>
<li>业界潮流，相关库也比较多</li>
<li>一旦被抓包，用户数据会被泄露</li>
</ul>
</li>
<li><code>aes</code>等对称加密算法<ul>
<li>通过对称加密算法，对用户身份信息进行加密，读取解密之后的用户信息</li>
<li>用户数据保密性高，同时也不消耗服务器资源</li>
<li>好像没有</li>
</ul>
</li>
</ul>
<p>选用哪一种好？其实对我来说，以上三种方式都是合格的，因为用户身份认证的核心在于，只要这个<code>token</code> 是我们自己的服务器签发的（无法伪造），就没问题。就拿<code>jwt</code>方式来说，虽然用户的数据（比如用户的<code>id</code>，用户的身份<code>scope</code>等信息）可能会被抓包获取到，但是抓包方无法伪造<code>jwt</code>的活，那就是成功的（你还是要老老实实的请求我们的<code>token</code>接口）.</p>
<blockquote>
<p>文章参考：</p>
</blockquote>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vUGVya2luc1podS9wLzk3MTM4MzYuaHRtbA==" title="网络请求中常见的加密机制和加密算法理解">网络请求中常见的加密机制和加密算法理解<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>data</tag>
        <tag>secret</tag>
      </tags>
  </entry>
  <entry>
    <title>使用JavaScript监听Dom节点变化</title>
    <url>/2020/03/15/javascript-dom-observer/</url>
    <content><![CDATA[<blockquote>
<p>最近接触 <code>webdom</code> 比较多，于此记录下部分 <code>JavaScript</code> 观察（或者说监听） <code>Webdom</code> 的姿势</p>
</blockquote>
<p>我们最近在开发一个在线原型编辑，用户可以在我们的编辑器上编辑一些产品原型类似的东西，相似的产品有 <span class="exturl" data-url="aHR0cHM6Ly9tb2Rhby5jYy8=" title="墨刀">墨刀<i class="fa fa-external-link"></i></span> ，但是我们的方向主要是图文。</p>
<p>里面涉及到很多 <code>Dom</code> 的监听与变化，事件主要在上一篇文章说过，这次说说 <code>Dom</code> 的变化方面。</p>
<a id="more"></a>

<p>比较主要的就是一些 <code>Dom</code> 标签的添加与移除，有一块比较特殊的：</p>
<blockquote>
<p>某个element , 当这个元素被移除的时候，释放另外一个 element 的状态</p>
</blockquote>
<p>看起来好像不是很麻烦，只要在移除的地方释放就完事了。类似于这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const trigger = document.querySelector(&apos;.someTrigger&apos;),</span><br><span class="line">    remove = document.querySelector(&apos;.someRemove&apos;),</span><br><span class="line">    release = document.querySelector(&apos;.someRelease&apos;);</span><br><span class="line"></span><br><span class="line">trigger.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class="line">    remove.remove();</span><br><span class="line">    release.setAttribute(&apos;some_state&apos;, &apos;release&apos;);</span><br><span class="line">    ...other code</span><br><span class="line">&#125;, false);</span><br></pre></td></tr></table></figure>

<p>后面我发现，这个状态简直有毒，因为业务的相关性太大，居然有十几个场景要设置的，而且有时候添加 <code>Dom</code> 节点也会涉及到。当然了，这不能难到我，我把代码修改了。变成了这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const trigger1 = document.querySelector(&apos;.someTrigger&apos;),</span><br><span class="line">    remove = document.querySelector(&apos;.someRemove&apos;),</span><br><span class="line">    release = document.querySelector(&apos;.someRelease&apos;)</span><br><span class="line">    //...others;</span><br><span class="line"></span><br><span class="line">trigger1.addEventListener(&apos;click&apos;, beTrigger, false);</span><br><span class="line">trigger2.addEventListener(&apos;click&apos;, beTrigger, false);</span><br><span class="line">trigger3.addEventListener(&apos;dblclick&apos;, beTrigger, false);</span><br><span class="line">trigger4.addEventListener(&apos;scroll&apos;, beTrigger, false);</span><br><span class="line">trigger5.addEventListener(&apos;focus&apos;, otherTrigger, false);</span><br><span class="line"></span><br><span class="line">function beTrigger() &#123;</span><br><span class="line">    remove.remove();</span><br><span class="line">    release.setAttribute(&apos;some_state&apos;, &apos;release&apos;);</span><br><span class="line">    // ...other code</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function otherTrigger() &#123;</span><br><span class="line">    const child = document.createElement(&apos;div&apos;);</span><br><span class="line">    trigger.appendChild(child);</span><br><span class="line">    release.setAttribute(&apos;some_state&apos;, &apos;other&apos;);</span><br><span class="line">    // ...other code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种处理方式很好，我提交代码进行了测试，没问题。于此我就下班了。</p>
<p>下班的路上，我还是对提交的代码很不安，虽然代码看起来什么问题，也能够处理业务，但是每一次有一个场景要触发，我就得添加一条 <code>someElement.addEventListener(&#39;someEvent&#39;, otherFunction, true|false)</code>，重复写这个对我这样有代码强迫的人很难受。</p>
<p>回家后我发现基本都是 <code>Dom</code> 节点在新增或者移除而触发的。</p>
<blockquote>
<p>可不可以监听容器下的 <code>Dom</code> 节点的变化呢？</p>
</blockquote>
<p>答案是可以的。</p>
<p>我认为这个应该也是类似于事件处理的一类，于是我发现了 <code>DOMNodeRemoved</code> 和 <code>DOMNodeInserted</code>，它们被归类在了 <code>Mutation Events</code>里面，但是已经被 <code>Web</code> 标准废弃了，替代它的是 <code>MutationObserver</code>。</p>
<p>看了它的示例，我用 <code>React</code> 改写成了如下代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; Button, Right &#125; from &apos;anypath&apos;;</span><br><span class="line"></span><br><span class="line">let observer = null, content;</span><br><span class="line"></span><br><span class="line">class ObserveDom extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.addElement = this.addElement.bind(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount () &#123;</span><br><span class="line">        observer = new MutationObserver(this.observerCallBack);</span><br><span class="line">        this.initContent();</span><br><span class="line">        observer.observe(content, &#123; childList: true &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        observer.disconnect();</span><br><span class="line">        observer = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    observerCallBack (mutationsList, observer) &#123;</span><br><span class="line">        Object.keys(mutationsList).map(function (index) &#123;</span><br><span class="line">            const item = mutationsList[index];</span><br><span class="line">            switch (item.type) &#123;</span><br><span class="line">            case &apos;childList&apos;:</span><br><span class="line">                console.info(item);</span><br><span class="line">                console.info(&apos;childList has been modified&apos;);</span><br><span class="line">                // ...other code</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    initContent() &#123;</span><br><span class="line">        if (content instanceof Element == false) content = document.getElementById(&apos;content&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addElement() &#123;</span><br><span class="line">        const child = document.createElement(&apos;div&apos;);</span><br><span class="line">        Object.keys(itemStyle).map(function (item) &#123;</span><br><span class="line">            child.style[item] = itemStyle[item];</span><br><span class="line">        &#125;);</span><br><span class="line">        child.innerHTML = &apos;Item&apos;;</span><br><span class="line">        content.appendChild(child);</span><br><span class="line">        // ...other code</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return &lt;div id=&apos;content&apos;&gt;</span><br><span class="line">            &lt;header&gt;</span><br><span class="line">                &lt;title&gt;ObserveDom&lt;/title&gt;</span><br><span class="line">                &lt;Right&gt;</span><br><span class="line">                    &lt;Button onClick=&#123;this.addElement&#125;&gt;Add Element&lt;/Button&gt;</span><br><span class="line">                    &lt;Button onClick=&#123;this.addElement&#125;&gt;Remove Element&lt;/Button&gt;</span><br><span class="line">                &lt;/Right&gt;</span><br><span class="line">            &lt;/header&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const itemStyle = &#123;// ...anyStyle&#125;</span><br><span class="line"></span><br><span class="line">export default ObserveDom;</span><br></pre></td></tr></table></figure>

<p>你甚至可以用这个 <code>MutationObserver</code> 给观察对象一个钩子，类似生命周期那样的(不过不是很有必要)，这里我使用了 <code>class</code> 没有用 <code>hooks</code> ，因为用前者比较对生命周期划分的比较清晰，容易理解（当然用 <code>hooks</code> 也可以实现）。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>Webdom</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript handle Event</title>
    <url>/2020/02/10/javascript-dom-event-listener/</url>
    <content><![CDATA[<blockquote>
<p>最近接触 <code>web</code> 事件比较多，于此记录下部分 <code>JavaScript</code> 对 <code>Webdom</code> 的姿势以及需要注意事宜。</p>
</blockquote>
<h3 id="事件命名"><a href="#事件命名" class="headerlink" title="事件命名"></a>事件命名</h3><p>尽量以 <code>handle</code> , <code>init</code> 等表示<strong>处理动词</strong> 开头，中间以 <strong>处理对象</strong>  衔接，最后由<strong>处理事件类型</strong>结尾。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type HandleEvent = (evt: Event) =&gt; void;</span><br><span class="line">const handleTargetClick: HandleEvent = (evt: Event) =&gt; &#123;</span><br><span class="line">    console.info(&apos;you just clicked!&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="事件注册的方式"><a href="#事件注册的方式" class="headerlink" title="事件注册的方式"></a>事件注册的方式</h3><p>我们来对比几种事件注册的方式：</p>
<p> <code>Html</code> 中</p>
<pre><code>console.info(&apos;you just clicked!&apos;);</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type=&quot;button&quot; onclick=&quot;handleTargetClick&quot;&gt;点击我试试&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p> <code>JavaScript</code> 中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type target = Element | Document;</span><br><span class="line">target.onclick = handleTargetClick;</span><br><span class="line">target.addEventListener(&apos;click&apos;, handleTargetClick, false);</span><br></pre></td></tr></table></figure>

<p>第一种是我比较喜欢的绑定方式，它显性绑定了处理事件的执行方法到 <code>target</code> 上， 我们很容易理解。</p>
<p>方式二可以说是隐式绑定，相对于第一种方式，你得自己找出你要绑定的 <code>target</code>。</p>
<blockquote>
<p>需要注意的是，如果你调用了两次的话，第二次会把第一次覆盖掉。</p>
</blockquote>
<p>方式三区别于方式二的主要地方在于：</p>
<ul>
<li>可以绑定多个事件处理，既绑定了多个不同的事件方法会并存。</li>
<li>绑定了相同的事件处理后，自动选择靠后的那一个 (<strong>不对匿名函数作用</strong>)</li>
<li>指定了事件触发的阶段(<strong>捕获</strong> or <strong>冒泡</strong>)</li>
</ul>
<blockquote>
<p>强烈建议使用这种绑定方式</p>
</blockquote>
<blockquote>
<p>强烈建议不要使用匿名函数绑定</p>
</blockquote>
<p>我们可以绑定多个事件处理，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const handelTargetClickAgain: HandleEvent = (evt: Event) =&gt; &#123;</span><br><span class="line">    console.info(&apos;handle click again&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">target.addEventListener(&apos;click&apos;, handleTargetClick, false);</span><br><span class="line">target.addEventListener(&apos;click&apos;, handelTargetClickAgain, true);</span><br></pre></td></tr></table></figure>

<p>如果你运行了这段代码，你会惊讶的发现，在控制台打印的第一条 <code>string</code> 竟然是 <code>handle click again</code>，而不是 <code>you just clicked!</code>。WTF，你可能会跳起来大喊: “What hell was that? Are you kidding me?”。</p>
<p>这就涉及到第三个参数了，第三个参数规定是一个 <code>boolean</code>，默认 <code>false</code>。如果你指定它为 <code>true</code>，事件处理将在 <strong>捕获</strong> 阶段触发，反之则在 <strong>冒泡</strong> 阶段触发。而这个捕获和冒泡怎么理解呢？事件的触发，先捕获，在冒泡。也就是说，捕获在前，冒泡在后。<br>上面代码中，由于我们在绑定 <code>handelTargetClickAgain</code> 指定了捕获阶段，所以它会先触发。</p>
<h3 id="事件阻止冒泡"><a href="#事件阻止冒泡" class="headerlink" title="事件阻止冒泡"></a>事件阻止冒泡</h3><p>我们发现这些一连串的事件处理放在了一起，他们之间的业务关系些许复杂，会有特殊情况发生。 (<em>你永远不知道你的甲方会提出什么需求</em> )，比如：某些特殊的情况就不要 <code>handelTargetClickAgain</code> 了。</p>
<p>这个时候就需要用到 <strong>阻止冒泡</strong> <code>stopPropagation</code> | <code>preventDefault</code> 了，我们可以把上述代码稍加修改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const handleTargetClick: HandleEvent = (evt: Event) =&gt; &#123;</span><br><span class="line">    console.info(&apos;you just clicked!&apos;);</span><br><span class="line">&#125;</span><br><span class="line">const handelTargetClickAgain: HandleEvent = (evt: Event) =&gt; &#123;</span><br><span class="line">    console.info(&apos;handle click again&apos;);</span><br><span class="line">    // 模拟特殊情况</span><br><span class="line">    if (Math.random() &gt; 0.5) &#123;</span><br><span class="line">        evt.stopPropagation(); // 阻止时间想上冒泡，即不会触发 handleTargetClick</span><br><span class="line">        // evt.preventDefault(); // 阻止时间的默认动作</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">target.addEventListener(&apos;click&apos;, handleTargetClick, false);</span><br><span class="line">target.addEventListener(&apos;click&apos;, handelTargetClickAgain, true);</span><br></pre></td></tr></table></figure>

<p>如此，对事件处理更上一层楼。</p>
<p><strong>enjoy and happy coding!</strong></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>Webdom</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>git工作区回滚</title>
    <url>/2019/12/04/git-revert/</url>
    <content><![CDATA[<blockquote>
<p>使用 <code>git</code> 团队协作管理项目的时候，难免会有错误的提交，按照正常的流程应该是在后续的提交纠正这些错误，但是如果这些错误本就不必要的话，是可以用回滚来操作的，于此记录下 <code>git</code> 下回滚的姿势。</p>
</blockquote>
<a id="more"></a>

<p>如果说，本次提交仅限本地的话，我们可以用 <code>git reset --hard [your reset version]</code> 来回退本地的版本，从而实现取消错误代码。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ laravel git:(master) git ll</span><br><span class="line">commit ee3105a (HEAD -&gt; master)</span><br><span class="line">Author: caixian &lt;qq52577517@163.com&gt;</span><br><span class="line">Date:   Wed Dec 4 09:34:17 2019 +0800</span><br><span class="line"></span><br><span class="line">    some stupid do this</span><br><span class="line"></span><br><span class="line"> app/Http/Controllers/User.php | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">commit c92f163 (origin/master)</span><br><span class="line">Author: caixian &lt;qq52577517@163.com&gt;</span><br><span class="line">Date:   Sat Nov 9 14:55:46 2019 +0800</span><br><span class="line"></span><br><span class="line">    clear cors</span><br><span class="line">:q</span><br><span class="line">$ laravel git:(master) git reset --hard c92f163</span><br><span class="line">HEAD is now at c92f163 clear cors</span><br></pre></td></tr></table></figure>

<p>如上，由于我们还未推送至远程，所以我们接下来的 <code>commit</code>, <code>push</code> 等一系列的行为都是正常的。</p>
<p>如果说，某人不慎把错误代码提交且推送到看远程的话，这个时候就小心了，正常情况下，尽量走正常路线解决错误代码 <em>(既在当前版本下找到错误代码且更正然后提交到远程)</em> ，正式环境下的代码可以用 <code>git reset --hard [version]</code> 暂时回退到正常版本。如果涉及到的代码量不大的话，我们可以用到 <code>git revert [version]</code> 来撤销更改。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ laravel git:(master) git ll</span><br><span class="line">commit 9a258dc (HEAD -&gt; master, origin/master)</span><br><span class="line">Author: caixian &lt;qq52577517@163.com&gt;</span><br><span class="line">Date:   Wed Dec 4 09:46:29 2019 +0800</span><br><span class="line"></span><br><span class="line">    some stupid do this</span><br><span class="line"></span><br><span class="line"> app/Http/Controllers/User.php | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">commit c92f163</span><br><span class="line">Author: caixian &lt;qq52577517@163.com&gt;</span><br><span class="line">Date:   Sat Nov 9 14:55:46 2019 +0800</span><br><span class="line"></span><br><span class="line">    clear cors</span><br><span class="line">:q</span><br><span class="line"></span><br><span class="line">$ laravel git:(master) git revert 9a258dc</span><br><span class="line">Revert &quot;clear cors&quot;</span><br><span class="line">  </span><br><span class="line">This reverts commit 9a258dc95d0c8c5b75c9e33c1513479be2f07e53.</span><br><span class="line"></span><br><span class="line"># Please enter the commit message for your changes. Lines starting</span><br><span class="line"># with &apos;#&apos; will be ignored, and an empty message aborts the commit.</span><br><span class="line">#</span><br><span class="line"># On branch master</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#       modified:   app/Http/Controllers/User.php</span><br><span class="line">#</span><br><span class="line">~                                                                                                                                                                                                                                  </span><br><span class="line">~                                                                                                                                                                                                                                  </span><br><span class="line">~                                                                                                                                                                                                                                 </span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line">[master fda0be6] Revert &quot;some stupid do this&quot;</span><br><span class="line"> 1 file changed, 7 insertions(+), 6 deletions(-)</span><br><span class="line"></span><br><span class="line">$ laravel git:(master) git push origin master</span><br><span class="line">Enumerating objects: 7, done.</span><br><span class="line">Counting objects: 100% (7/7), done.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (4/4), done.</span><br><span class="line">Writing objects: 100% (4/4), 437 bytes | 437.00 KiB/s, done.</span><br><span class="line">Total 4 (delta 3), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (3/3), completed with 3 local objects.</span><br><span class="line">remote: </span><br><span class="line">remote: GitHub found 2 vulnerabilities on ElegantLive/learn-laravel&apos;s default branch (2 moderate). To find out more, visit:</span><br><span class="line">remote:      https://github.com/ElegantLive/learn-laravel/network/alerts</span><br><span class="line">remote: </span><br><span class="line">To github.com:ElegantLive/learn-laravel.git</span><br><span class="line">   9a258dc..fda0be6  master -&gt; master</span><br><span class="line">$ laravel git:(master) git ll</span><br><span class="line">commit fda0be6 (HEAD -&gt; master, origin/master)</span><br><span class="line">Author: caixian &lt;qq52577517@163.com&gt;</span><br><span class="line">Date:   Wed Dec 4 09:49:54 2019 +0800</span><br><span class="line"></span><br><span class="line">    Revert &quot;some stupid do this&quot;</span><br><span class="line">    </span><br><span class="line">    This reverts commit dbdc6db09ffa9bd5af461fc91f04261566bb017c.</span><br><span class="line"></span><br><span class="line">app/Http/Controllers/User.php | 1 -</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"></span><br><span class="line">commit 9a258dc</span><br><span class="line">Author: caixian &lt;qq52577517@163.com&gt;</span><br><span class="line">Date:   Wed Dec 4 09:46:29 2019 +0800</span><br><span class="line"></span><br><span class="line">    some stupid do this</span><br><span class="line"></span><br><span class="line"> app/Http/Controllers/User.php | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">commit c92f163</span><br><span class="line">Author: caixian &lt;qq52577517@163.com&gt;</span><br><span class="line">Date:   Sat Nov 9 14:55:46 2019 +0800</span><br><span class="line"></span><br><span class="line">    clear cors</span><br><span class="line">:q</span><br></pre></td></tr></table></figure>

<p>由上可以看到，我们成功撤销了<code>some stupid do this</code> 的更改，且成功推送到了远程，这样我们就可以基于上个版本(<code>clear cors</code>)继续开发。</p>
<blockquote>
<p>注意： <code>git revert [version]</code> 是撤销某个提交的更改，不是回退到某个版本</p>
</blockquote>
<p>当然，如果说，有多个错误提交形成一错再错的连环作用的话，建议基于稳定版本重新开一个分支 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b [new branch name] // 切换至新分支 </span><br><span class="line">（当然你也可以基于当前分支回退稳定版本，然后强行推送至远程）</span><br><span class="line">git reset --hard [version] // 回退至稳定版本</span><br><span class="line">git push -f origin [new branch name] // 强制推送到远程</span><br></pre></td></tr></table></figure>

<p>祝你好运</p>
<p><strong>enjoy and happy coding!</strong></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git取消对文件的更新</title>
    <url>/2019/11/09/git-cancel-update/</url>
    <content><![CDATA[<blockquote>
<p>使用git管理项目的时候，涉及到多人维护项目。<br>当某一文件有多人修改的时候，这时boss来了，放下这个需求，我有个项目更需要你，这时候我们需要取消之前我们的更改（此时还未 <code>commit</code> 该文件），于此记录下取消对文件的更新姿势。</p>
</blockquote>
<p>在 <code>git</code> 中，<code>git checkout</code> 是一个很常用的命令，主要用于<strong>切换分支或恢复工作树文件</strong>，我们可以用它来解决这一问题。</p>
<p>通常我用 <code>git checkout &lt;branch&gt;</code> 于切换分支，而</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- [your cancel update files]</span><br></pre></td></tr></table></figure>

<p>用于取消对文件的更改。</p>
<p><strong>enjoy and happy coding!</strong></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>用curl模拟http请求</title>
    <url>/2019/10/26/curl-request/</url>
    <content><![CDATA[<blockquote>
<p>curl 是利用url规则在命令行下工作的工具。我们可以通过它来测试和模拟链接。</p>
</blockquote>
<p>比如简单的用 <code>curl</code> 查看自己的 <code>ip</code> 地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ curl cip.cc</span><br><span class="line">IP	 : 222.***.***.142</span><br><span class="line">地址	: 中国  湖南  长沙</span><br><span class="line">运营商	: 电信</span><br><span class="line"></span><br><span class="line">数据二	: 湖南省长沙市 | 电信</span><br><span class="line"></span><br><span class="line">数据三	: 中国湖南省长沙市 | 电信</span><br><span class="line"></span><br><span class="line">URL	: http://www.cip.cc/222.***.***.142</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<p>简单来说，可以用它在命令行发起请求。</p>
<h3 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h3><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>语法：<code>curl protocol://address:port/url?args</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ curl api.laravel.local/person?id=2</span><br><span class="line">&#123;&quot;message&quot;:&quot;Token\u5df2\u8fc7\u671f&quot;,&quot;data&quot;:[],&quot;errorCode&quot;:10003,&quot;requestUrl&quot;:&quot;person&quot;&#125;%</span><br></pre></td></tr></table></figure>

<h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>语法：<code>curl -d &quot;args&quot; &quot;protocol://address:port/url&quot;</code><br><strong><em>注意：记得参数加引号</em></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ curl -d &quot;mobile=10112345678&amp;password=12345678&quot; &quot;symfony.local/token/user&quot;</span><br><span class="line">&#123;&quot;message&quot;:&quot;mobile is not valid.&quot;,&quot;errorCode&quot;:10000,&quot;data&quot;:[],&quot;requestUrl&quot;:&quot;\/token\/user&quot;&#125;%</span><br></pre></td></tr></table></figure>

<h4 id="PUT-PATCH-DELETE"><a href="#PUT-PATCH-DELETE" class="headerlink" title="PUT | PATCH | DELETE"></a>PUT | PATCH | DELETE</h4><p>需要使用其他协议的时候加上<code>-X</code>且在后面指明你要用的协议。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ curl -X PUT &quot;symfony.local/index/index&quot; -d &quot;mobile=15512345678&quot;</span><br><span class="line">&#123;&quot;message&quot;:&quot;OK&quot;,&quot;errorCode&quot;:0,&quot;data&quot;:&#123;&quot;mobile&quot;:&quot;15512345678&quot;&#125;,&quot;requestUrl&quot;:&quot;\/index\/index&quot;&#125;%</span><br></pre></td></tr></table></figure>

<p>如果你的参数是放在 <code>body</code> 里面的 <code>json</code> 格式数据话，需要设置请求头 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ curl -H &quot;Content-Type:application/json&quot; -X PATCH -d &apos;&#123;&quot;mobile&quot;:&quot;14412345678&quot;&#125;&apos; symfony.local/index/three</span><br><span class="line">&#123;&quot;message&quot;:&quot;OK&quot;,&quot;errorCode&quot;:0,&quot;data&quot;:&#123;&quot;mobile&quot;:&quot;14412345678&quot;&#125;,&quot;requestUrl&quot;:&quot;\/index\/three&quot;&#125;%</span><br></pre></td></tr></table></figure>

<p>如果你想查看完整的请求信息加上 <code>-v</code> 类似这样用的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ curl -v -X DELETE &quot;symfony.local/index/second?mobile=15212345678&quot;</span><br><span class="line">*   Trying ::1...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to symfony.local (::1) port 80 (#0)</span><br><span class="line">&gt; DELETE /index/second?mobile=15212345678 HTTP/1.1</span><br><span class="line">&gt; Host: symfony.local</span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Date: Sat, 26 Oct 2019 05:27:00 GMT</span><br><span class="line">&lt; Server: Apache</span><br><span class="line">&lt; X-Powered-By: PHP/7.2.14</span><br><span class="line">&lt; Cache-Control: no-cache, private</span><br><span class="line">&lt; X-Robots-Tag: noindex</span><br><span class="line">&lt; Content-Length: 93</span><br><span class="line">&lt; Content-Type: application/json</span><br><span class="line">&lt;</span><br><span class="line">* Connection #0 to host symfony.local left intact</span><br><span class="line">&#123;&quot;message&quot;:&quot;OK&quot;,&quot;errorCode&quot;:0,&quot;data&quot;:&#123;&quot;mobile&quot;:&quot;15212345678&quot;&#125;,&quot;requestUrl&quot;:&quot;\/index\/second&quot;&#125;%</span><br></pre></td></tr></table></figure>

<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ curl https://jaychoumylove.github.io/images/avator@slzs.jpg -o 1.jpg --progress</span><br><span class="line">######################################################################## 100.0%</span><br></pre></td></tr></table></figure>

<p>关于更多 <code>curl</code> 的信息可以查看<span class="exturl" data-url="aHR0cHM6Ly9tYW4ubGludXhkZS5uZXQvY3VybA==" title="curl命令_Linux curl 命令用法详解：利用URL规则在命令行下工作的文件传输工具">curl命令_Linux curl 命令用法详解<i class="fa fa-external-link"></i></span></p>
<p><strong>enjoy and happy coding!</strong></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>curl</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>git撤销暂存区文件</title>
    <url>/2019/10/26/git-reset-add-files/</url>
    <content><![CDATA[<blockquote>
<p>使用git管理项目的时候，要把新文件要加入到暂存区，<br>我一般用 <code>git add .</code>的方法将文件简单除暴的加入至暂存区。<br>但是如果有个不需要的文件被误操作 or 手抖加入至版本库管理呢？在这里记录下 <code>git</code> 将文件移出暂存区的姿势。</p>
</blockquote>
<p>这里可以使用 <code>git</code> 版本回滚的机制来解决这一问题。</p>
<p>通常<code>git reset HEAD</code> 或者 <code>git reset HEAD .</code> ，可以回滚到当前工作区，也就是说如果之前有把文件加入暂存区的话，全部都会移出暂存区。<br>既然如此，就可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD [your reset files]</span><br></pre></td></tr></table></figure>

<p>来把特定文件移出至暂存区，然后把该文件添加至 <code>.gitignore</code> 文件中。</p>
<p><strong>enjoy and happy coding!</strong></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git重写你的提交日志</title>
    <url>/2019/10/26/git-reset-message/</url>
    <content><![CDATA[<blockquote>
<p>使用git管理项目的时候，每一次提交保存都有日志的记录，在这里记录下 <code>git</code> 提交日志的改写。</p>
</blockquote>
<p>使用 <code>git commit --amend</code> 可以更改你上一次的提交保存的日志。你也可以使用 <code>git commit --amend -m &quot;New commit message&quot;</code>快速更改。</p>
<p>如果你的提交已经推送到远程的话，使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;branch&gt; --force</span><br><span class="line"># Or</span><br><span class="line">git push &lt;remote&gt; &lt;branch&gt; -f</span><br></pre></td></tr></table></figure>

<p>推送到远程更改日志。</p>
<blockquote>
<p>这种推送为强制推送，git 官方不推荐</p>
</blockquote>
<p>强制推送远程使用姿势不是很优雅， <em>(但是谁叫你写错日志呢？)</em> 所以，以后写日志之前要反复斟酌。以便团队日后 <code>code review</code> 更高效！</p>
<p><strong>enjoy and happy coding!</strong></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用symfony构建restful应用 - 验证器</title>
    <url>/2019/09/20/symfony-validator/</url>
    <content><![CDATA[<h4 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h4><blockquote>
<p>上篇文章我们成功构建了异常处理，下面我们来构建自己的验证器</p>
</blockquote>
<blockquote>
<p>在<span class="exturl" data-url="aHR0cHM6Ly9zeW1mb255LmNvbS9kb2MvY3VycmVudC9jb21wb25lbnRzL3ZhbGlkYXRvci5odG1s" title="官方文档:validator">官方文档:validator<i class="fa fa-external-link"></i></span>中，验证器常常以注解的方式使用，我们构建的<code>restful</code>架构使用自定义验证器。</p>
</blockquote>
<a id="more"></a>

<h4 id="验证器的简单使用"><a href="#验证器的简单使用" class="headerlink" title="验证器的简单使用"></a>验证器的简单使用</h4><p>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer require symfony/validator</span><br></pre></td></tr></table></figure>

<p>我们可以在控制器中使用简单的验证器来验证数据，像这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// src/controll/Word</span><br><span class="line">namespace App\Controller;</span><br><span class="line"></span><br><span class="line">use Symfony\Component\HttpFoundation\Response;</span><br><span class="line">use Symfony\Component\Routing\Annotation\Route;</span><br><span class="line">use Symfony\Component\Validator\Validation;</span><br><span class="line">use Symfony\Component\Validator\Constraints as Assert;</span><br><span class="line">use App\Exception\Parameter;</span><br><span class="line">use App\Exception\Success;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Route(&quot;/hello&quot;)</span><br><span class="line"> */</span><br><span class="line">class Word</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @Route(&quot;/word&quot;,methods=&#123;&quot;GET&quot;&#125;)</span><br><span class="line">     */</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $validator = Validation::createValidator();</span><br><span class="line">        $violations = $validator-&gt;validate([</span><br><span class="line">            &apos;num&apos; =&gt; 12</span><br><span class="line">        ], new Assert\Collection([</span><br><span class="line">            &apos;num&apos; =&gt; new Assert\GreaterThan([</span><br><span class="line">                &apos;value&apos; =&gt; 10,</span><br><span class="line">            ])</span><br><span class="line">        ]))</span><br><span class="line">        if (0 !== count($violations)) &#123;</span><br><span class="line">            foreach ($res as $item) &#123;</span><br><span class="line">                $prefix = empty($message) ? &apos;&apos;: &apos;;&apos;;</span><br><span class="line">                $message .= $prefix . $item-&gt;getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">            throw new Parameter([&apos;message&apos; =&gt; $message]);</span><br><span class="line">        &#125;</span><br><span class="line">        throw new Success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上，</p>
<ul>
<li>如果验证通过就会抛出<code>Success</code>，表示请求成功且数据验证通过。</li>
<li>如果验证失败就会抛出<code>Parameter</code>，提示用户数据验证失败。</li>
</ul>
<h4 id="自定义验证器"><a href="#自定义验证器" class="headerlink" title="自定义验证器"></a>自定义验证器</h4><p>上面我们已经能够成功使用验证器了，但是距离我们的预期太远了。如果多几个数据，多几个约束，光是一个数据的校验就几十行代码，可读性极差，不能重用，日后维护也很困难</p>
<p><strong><em>我们需要构建自己的验证器</em></strong>。<code>App\Validator\Base</code>代码实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Validator;</span><br><span class="line"></span><br><span class="line">use App\Exception\Parameter;</span><br><span class="line">use Symfony\Component\Validator\Constraints\Collection;</span><br><span class="line">use Symfony\Component\Validator\Validation;</span><br><span class="line">use Symfony\Component\Validator\Validator\ValidatorInterface;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Class Base</span><br><span class="line"> * @package App\Validator</span><br><span class="line"> */</span><br><span class="line">class Base</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @var Collection</span><br><span class="line">     */</span><br><span class="line">    protected $collection;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @var ValidatorInterface</span><br><span class="line">     */</span><br><span class="line">    protected static $validator;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Base constructor.</span><br><span class="line">     */</span><br><span class="line">    public function __construct () &#123;</span><br><span class="line">        if (empty(self::getValidator() instanceof ValidatorInterface)) &#123;</span><br><span class="line">            self::setValidator();</span><br><span class="line">        &#125;</span><br><span class="line">        static::setCollection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param array $input</span><br><span class="line">     * @throws \Exception</span><br><span class="line">     */</span><br><span class="line">    public function check (array $input)</span><br><span class="line">    &#123;</span><br><span class="line">        $violations = self::getValidator()-&gt;validate($input, self::getCollection());</span><br><span class="line">        $message = &apos;&apos;;</span><br><span class="line">        foreach ($violations as $$violation) &#123;</span><br><span class="line">            $prefix = empty($message) ? &apos;&apos;: &apos;;&apos;;</span><br><span class="line">            $message .= $prefix . $$violation-&gt;getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        if ($message) throw new Parameter([&apos;message&apos; =&gt; $message]);</span><br><span class="line">    &#125;</span><br><span class="line">    ...getter or setter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码中，我们构建了自己的验证器基类。<br>只要验证不通过，就会抛出参数异常的错误(<code>Parameter</code>)；<br>子类只需要实现<code>setCollection</code>定义约束就可以使用了。</p>
<h4 id="自定义验证器的使用"><a href="#自定义验证器的使用" class="headerlink" title="自定义验证器的使用"></a>自定义验证器的使用</h4><p>我们来构建一个子类<code>App\Validator\Example</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Validator;</span><br><span class="line"></span><br><span class="line">use Symfony\Component\Validator\Constraints as Assert;</span><br><span class="line"></span><br><span class="line">class Example extends Base</span><br><span class="line">&#123;</span><br><span class="line">    public function setCollection ()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;collection = new Assert\Collection([</span><br><span class="line">            &apos;num&apos; =&gt; new Assert\GreaterThan([</span><br><span class="line">                &apos;value&apos; =&gt; 10,</span><br><span class="line">            ])</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>让我们在控制器中使用它:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// src/controll/Word</span><br><span class="line">namespace App\Controller;</span><br><span class="line"></span><br><span class="line">use Symfony\Component\HttpFoundation\Response;</span><br><span class="line">use Symfony\Component\Routing\Annotation\Route;</span><br><span class="line">use App\Validator\Example;</span><br><span class="line">use App\Exception\Success;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Route(&quot;/hello&quot;)</span><br><span class="line"> */</span><br><span class="line">class Word</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @Route(&quot;/word&quot;,methods=&#123;&quot;GET&quot;&#125;)</span><br><span class="line">     */</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $data = [&apos;num&apos; =&gt; 12];</span><br><span class="line">        (new Example())-&gt;check($data);</span><br><span class="line">        throw new Success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从数行代码变为一行代码，是不是简洁多了？</p>
<h4 id="定义规则"><a href="#定义规则" class="headerlink" title="定义规则"></a>定义规则</h4><blockquote>
<p>上面我们虽然实现了自定义验证器。但是用的规则还是<code>symfony/validation</code>里面的，当需要验证特殊字段的时候(比如验证手机号码)，我们还是需要自己定义的规则。</p>
</blockquote>
<p>下面我们就来实现一下验证手机号码的规则。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php bin/console make:validator Mobile</span><br></pre></td></tr></table></figure>

<p>上面的代码中，我们使用<code>makebundle</code>帮我们自动生成了<code>App\Validator\Mobile</code>和<code>App\Validator\MobileValidator</code>，如果你没有安装<code>makebundle</code>的话，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer require symfony/maker-bundle --dev</span><br></pre></td></tr></table></figure>

<p>下面我们来实现<code>App\Validator\Mobile</code>和<code>App\Validator\MobileValidator</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Validator;</span><br><span class="line"></span><br><span class="line">use Symfony\Component\Validator\Constraint;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Annotation</span><br><span class="line"> */</span><br><span class="line">class Mobile extends Constraint</span><br><span class="line">&#123;</span><br><span class="line">    public $message = &apos;电话号码错误&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建<code>App\Rule\MobileValidator.php</code>文件，定义我们的规则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Validator;</span><br><span class="line"></span><br><span class="line">use Symfony\Component\Validator\Constraint;</span><br><span class="line">use Symfony\Component\Validator\ConstraintValidator;</span><br><span class="line"></span><br><span class="line">class MobileValidator extends ConstraintValidator</span><br><span class="line">&#123;</span><br><span class="line">    public function validate($value, Constraint $constraint)</span><br><span class="line">    &#123;</span><br><span class="line">        /* @var $constraint \App\Validator\Mobile */</span><br><span class="line"></span><br><span class="line">        $rule = &apos;^1(3|4|5|7|8)[0-9]\d&#123;8&#125;$^&apos;;</span><br><span class="line">        $res = preg_match($rule, $value);</span><br><span class="line">        if (empty($res)) &#123;</span><br><span class="line">            $this-&gt;context</span><br><span class="line">                -&gt;buildViolation($constraint-&gt;message)</span><br><span class="line">                -&gt;setParameter(&apos;&#123;&#123; value &#125;&#125;&apos;, $value)</span><br><span class="line">                -&gt;addViolation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，我们用了一个简单的正则表达式来验证电话号码，失败后丢入错误的上下文中。</p>
<h4 id="使用定义规则"><a href="#使用定义规则" class="headerlink" title="使用定义规则"></a>使用定义规则</h4><p>我们已经有了自己定义的规则，我们怎么来使用它呢？</p>
<p>更新我们的<code>App\Validator\Example</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\Validator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use App\Validator\Mobile;</span><br><span class="line">use Symfony\Component\Validator\Constraints as Assert;</span><br><span class="line"></span><br><span class="line">class Example extends Base</span><br><span class="line">&#123;</span><br><span class="line">    public function setCollection ()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;collection = new Assert\Collection([</span><br><span class="line">            &apos;num&apos; =&gt; new Assert\GreaterThan([</span><br><span class="line">                &apos;value&apos; =&gt; 10,</span><br><span class="line">            ]),</span><br><span class="line">            &apos;mobile&apos; =&gt; new Mobile()</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们在控制器中使用它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// src/controll/Word</span><br><span class="line">namespace App\Controller;</span><br><span class="line"></span><br><span class="line">use Symfony\Component\HttpFoundation\Response;</span><br><span class="line">use Symfony\Component\Routing\Annotation\Route;</span><br><span class="line">use App\Validator\Example;</span><br><span class="line">use App\Exception\Success;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Route(&quot;/hello&quot;)</span><br><span class="line"> */</span><br><span class="line">class Word</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @Route(&quot;/word&quot;,methods=&#123;&quot;GET&quot;&#125;)</span><br><span class="line">     */</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $data = [</span><br><span class="line">            &apos;num&apos; =&gt; 12.</span><br><span class="line">            &apos;mobile&apos; =&gt; &apos;12345678920&apos;</span><br><span class="line">        ];</span><br><span class="line">        (new Example())-&gt;check($data);</span><br><span class="line">        throw new Success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到我们几乎没有改动控制器的代码，只是更新了验证的数据而已。</p>
<h4 id="扩展-验证器与规则分层"><a href="#扩展-验证器与规则分层" class="headerlink" title="扩展 - 验证器与规则分层"></a>扩展 - 验证器与规则分层</h4><p>到这里我们基本实现了自己的数据校验层，细心的同学可能发现了，我们的定义的规则和验证器都放在了<code>App\Validator</code>下，其实这也没什么，但是以后验证层多起来，找文件非常困难，更何况还有可能有重名文件存在。</p>
<p><strong><em>我们希望验证器和我们定义的规则分开，规则都放在<code>App\Rule</code>下</em></strong></p>
<p>上面我们通过<code>makebundle</code>创建了我们的规则。同理我们可以创建自己的<code>make</code>命令，不需要动其中的逻辑，只要简单的修改创建命令和创建规则的文件夹就行了。<em>这里只是简单的实现，如果想深入的话，还请参阅源码</em></p>
<p>创建<code>App\Make\Rule</code>，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Make;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Symfony\Bundle\MakerBundle\ConsoleStyle;</span><br><span class="line">use Symfony\Bundle\MakerBundle\DependencyBuilder;</span><br><span class="line">use Symfony\Bundle\MakerBundle\Generator;</span><br><span class="line">use Symfony\Bundle\MakerBundle\InputConfiguration;</span><br><span class="line">use Symfony\Bundle\MakerBundle\Maker\AbstractMaker;</span><br><span class="line">use Symfony\Bundle\MakerBundle\Str;</span><br><span class="line">use Symfony\Component\Console\Command\Command;</span><br><span class="line">use Symfony\Component\Console\Input\InputArgument;</span><br><span class="line">use Symfony\Component\Console\Input\InputInterface;</span><br><span class="line">use Symfony\Component\Validator\Validation;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Class Rule</span><br><span class="line"> * @package App\Make</span><br><span class="line"> */</span><br><span class="line">class Rule extends AbstractMaker</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public static function getCommandName (): string</span><br><span class="line">    &#123;</span><br><span class="line">        return &apos;make:rule&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param Command            $command</span><br><span class="line">     * @param InputConfiguration $inputConfig</span><br><span class="line">     */</span><br><span class="line">    public function configureCommand (Command $command, InputConfiguration $inputConfig)</span><br><span class="line">    &#123;</span><br><span class="line">        $command</span><br><span class="line">            -&gt;setDescription(&apos;Creates a new validator and constraint class&apos;)</span><br><span class="line">            -&gt;addArgument(&apos;name&apos;, InputArgument::OPTIONAL, &apos;The name of the validator class (e.g. &lt;fg=yellow&gt;EnabledValidator&lt;/&gt;)&apos;)</span><br><span class="line">            -&gt;setHelp(file_get_contents(__DIR__.&apos;/../../vendor/symfony/maker-bundle/src/Resources/help/MakeValidator.txt&apos;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param InputInterface $input</span><br><span class="line">     * @param ConsoleStyle   $io</span><br><span class="line">     * @param Generator      $generator</span><br><span class="line">     * @throws \Exception</span><br><span class="line">     */</span><br><span class="line">    public function generate (InputInterface $input, ConsoleStyle $io, Generator $generator)</span><br><span class="line">    &#123;</span><br><span class="line">        $validatorClassNameDetails = $generator-&gt;createClassNameDetails(</span><br><span class="line">            $input-&gt;getArgument(&apos;name&apos;),</span><br><span class="line">            &apos;Rule\\&apos;,</span><br><span class="line">            &apos;Validator&apos;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        $constraintFullClassName = Str::removeSuffix($validatorClassNameDetails-&gt;getFullName(), &apos;Validator&apos;);</span><br><span class="line"></span><br><span class="line">        $generator-&gt;generateClass(</span><br><span class="line">            $validatorClassNameDetails-&gt;getFullName(),</span><br><span class="line">            &apos;validator/Validator.tpl.php&apos;,</span><br><span class="line">            [</span><br><span class="line">                &apos;constraint_class_name&apos; =&gt; $constraintFullClassName,</span><br><span class="line">            ]</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        $generator-&gt;generateClass(</span><br><span class="line">            $constraintFullClassName,</span><br><span class="line">            &apos;validator/Constraint.tpl.php&apos;,</span><br><span class="line">            []</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        $generator-&gt;writeChanges();</span><br><span class="line"></span><br><span class="line">        $this-&gt;writeSuccessMessage($io);</span><br><span class="line"></span><br><span class="line">        $io-&gt;text([</span><br><span class="line">            &apos;Next: Open your new constraint &amp; validators and add your logic.&apos;,</span><br><span class="line">            &apos;Find the documentation at &lt;fg=yellow&gt;http://symfony.com/doc/current/validation/custom_constraint.html&lt;/&gt;&apos;,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param DependencyBuilder $dependencies</span><br><span class="line">     */</span><br><span class="line">    public function configureDependencies (DependencyBuilder $dependencies)</span><br><span class="line">    &#123;</span><br><span class="line">        $dependencies-&gt;addClassDependency(</span><br><span class="line">            Validation::class,</span><br><span class="line">            &apos;validator&apos;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，我们就可以通过自己的命令创建规则了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php bin/console make:rule [rulename]</span><br></pre></td></tr></table></figure>

<p>以后创建的规则都定义在<code>App\Rule</code>下，不用担心验证器和规则重名的问题。</p>
<p>由此，我们构建了自己的数据校验层，它十分简洁，分工明确，维护简单。</p>
<p><strong>enjoy and happy coding!</strong></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>restful</tag>
        <tag>symfony</tag>
      </tags>
  </entry>
  <entry>
    <title>使用symfony构建restful应用 - restful异常处理</title>
    <url>/2019/09/19/symfony-exception/</url>
    <content><![CDATA[<h4 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h4><blockquote>
<p>上篇文章我们构建了一个基础的api接口，本篇文章我们要构建自己的异常处理以及restful返回。</p>
</blockquote>
<a id="more"></a>

<h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><p>我们可以在控制器中主动抛出一个异常，像这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// src/controll/Word</span><br><span class="line">namespace App\Controller;</span><br><span class="line"></span><br><span class="line">use Symfony\Component\HttpFoundation\Response;</span><br><span class="line">use Symfony\Component\Routing\Annotation\Route;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Route(&quot;/hello&quot;)</span><br><span class="line"> */</span><br><span class="line">class Word</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @Route(&quot;/word&quot;,methods=&#123;&quot;GET&quot;&#125;)</span><br><span class="line">     */</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        throw new \Exception(&apos;something was wrong!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以用<code>curl</code>命令来（或者用<code>postman</code>）请求<code>[yourdomain]/hello/word</code>查看效果。</p>
<!--more-->

<h4 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h4><p>上面我们已经抛出了异常，接下来我们需要捕获这个异常并进行处理。</p>
<p>在<code>symfony</code>中，有这么一个组件：</p>
<blockquote>
<p>HttpKernel组件提供了一个接口，该接口规范了从请求开始并创建适当响应的过程. 无论该系统的架构多么多样，该组件都是任何应用程序或框架的核心。</p>
</blockquote>
<p>这个组件对外暴露了一个事件：<code>kernel.exception</code>，可以让我们很轻松的实现自定义异常处理</p>
<p>在<code>config/services.yaml</code>下加入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># design exception handler</span><br><span class="line">App\EventListener\Exception:</span><br><span class="line">    tags:</span><br><span class="line">        - &#123; name: kernel.event_listener, event: kernel.exception &#125;</span><br></pre></td></tr></table></figure>

<p>其中，<code>App\EventListener\Exception</code>是我们的异常处理类，通过<code>tags</code>来告知<code>symfony</code>他是<code>kernel.exception</code>事件的<em>监听者</em>。
下面我们来实现<code>App\EventListener\Exception</code>类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\EventListener;</span><br><span class="line"></span><br><span class="line">use Symfony\Component\HttpFoundation\JsonResponse;</span><br><span class="line">use Symfony\Component\HttpKernel\Event\ExceptionEvent;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Class Exception</span><br><span class="line"> * @package App\EventListener</span><br><span class="line"> */</span><br><span class="line">class Exception</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @param ExceptionEvent $event</span><br><span class="line">     * @return ExceptionEvent</span><br><span class="line">     */</span><br><span class="line">    public function onKernelException(ExceptionEvent $event)</span><br><span class="line">    &#123;</span><br><span class="line">        $event-&gt;setResponse($this-&gt;createJsonRespons($event));</span><br><span class="line"></span><br><span class="line">        return $event;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param ExceptionEvent $event</span><br><span class="line">     * @return JsonResponse</span><br><span class="line">     */</span><br><span class="line">    private function createJsonResponse (ExceptionEvent $event)</span><br><span class="line">    &#123;</span><br><span class="line">        return JsonResponse::create([</span><br><span class="line">            &apos;message&apos; =&gt; $event-&gt;getException()-&gt;getMessage(),</span><br><span class="line">            &apos;requestUrl&apos; =&gt; $event-&gt;getRequest()-&gt;getPathInfo()</span><br><span class="line">        ], $event-&gt;getException()-&gt;getStatusCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码中，我们捕获了抛出的异常，并且把异常信息以json数据形式返回。</p>
<h4 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h4><p>上面的代码中我们能够通过<code>onKernelException</code>方法，能够捕获到异常，但是我们并不知道是框架自己的异常还是我们主动抛出的异常。为了区分以及构建更友好的<code>restful</code>结构，我们需要自定义异常。</p>
<p>我们在<code>src</code>目录下创建<code>Exception\Base</code>作为我们异常的基类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\Exception;</span><br><span class="line"></span><br><span class="line">use Symfony\Component\HttpKernel\Exception\HttpException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Class Base</span><br><span class="line"> * @package App\Exception</span><br><span class="line"> */</span><br><span class="line">class Base extends HttpException</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 返回的http状态码</span><br><span class="line">     * @var int</span><br><span class="line">     */</span><br><span class="line">    protected $status = 500;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 错误信息</span><br><span class="line">     * @var string</span><br><span class="line">     */</span><br><span class="line">    protected $message = &apos;unknown&apos;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 自定义错误码</span><br><span class="line">     * @var int</span><br><span class="line">     */</span><br><span class="line">    protected $errorCode = 999;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 附加数据</span><br><span class="line">     * @var array</span><br><span class="line">     */</span><br><span class="line">    protected $data = [];</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 允许携带的附加数据key</span><br><span class="line">     * @var array</span><br><span class="line">     */</span><br><span class="line">    protected $accessKey = [&apos;data&apos;, &apos;errorCode&apos;, &apos;message&apos;];</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Base constructor.</span><br><span class="line">     * @param array           $errorData</span><br><span class="line">     * @param int             $statusCode</span><br><span class="line">     * @param \Throwable|null $previous</span><br><span class="line">     */</span><br><span class="line">    public function __construct (array $errorData = [], int $statusCode = 0, \Throwable $previous = null)</span><br><span class="line">    &#123;</span><br><span class="line">        foreach ($this-&gt;accessKey as $key =&gt; $value) &#123;</span><br><span class="line">            if (array_key_exists($value, $errorData)) $this-&gt;$value = $errorData[$value];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($statusCode) $this-&gt;setStatus($statusCode);</span><br><span class="line"></span><br><span class="line">        parent::__construct($this-&gt;getStatus(), $this-&gt;getMessage(), $previous, [], $this-&gt;getStatus());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...getter or setter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上的代码中，核心的代码即为构造方法。</p>
<p>结合我们的<code>App\EventListener\Exception</code>，我们把他的代码改为如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\EventListener;</span><br><span class="line"></span><br><span class="line">use App\Exception\Base;</span><br><span class="line">use Symfony\Component\HttpFoundation\JsonResponse;</span><br><span class="line">use Symfony\Component\HttpKernel\Event\ExceptionEvent;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Class Exception</span><br><span class="line"> * @package App\EventListener</span><br><span class="line"> */class Exception</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @var</span><br><span class="line">     */</span><br><span class="line">    private $event;</span><br><span class="line">    /**</span><br><span class="line">     * @var int</span><br><span class="line">     */</span><br><span class="line">    private $statusCode = 500;</span><br><span class="line">    /**</span><br><span class="line">     * @var int</span><br><span class="line">     */</span><br><span class="line">    private $errorCode = 999;</span><br><span class="line">    /**</span><br><span class="line">     * @var string</span><br><span class="line">     */</span><br><span class="line">    private $message = &apos;服务器异常&apos;;</span><br><span class="line">    /**</span><br><span class="line">     * @var array</span><br><span class="line">     */</span><br><span class="line">    private $data = [];</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param ExceptionEvent $event</span><br><span class="line">     * @return ExceptionEvent</span><br><span class="line">     */</span><br><span class="line">    public function onKernelException(ExceptionEvent $event)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;setEvent($event);</span><br><span class="line">        $exception = $event-&gt;getException();</span><br><span class="line">        if ($exception instanceof Base) &#123;</span><br><span class="line">            $this-&gt;setData($exception-&gt;getData());</span><br><span class="line">            $this-&gt;setMessage($exception-&gt;getMessage());</span><br><span class="line">            $this-&gt;setErrorCode($exception-&gt;getErrorCode());</span><br><span class="line">            $this-&gt;setStatusCode($exception-&gt;getStatus());</span><br><span class="line"></span><br><span class="line">            $event-&gt;setResponse($this-&gt;createJsonResponse());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $event;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @return JsonResponse</span><br><span class="line">     */</span><br><span class="line">    private function createJsonResponse ()</span><br><span class="line">    &#123;</span><br><span class="line">        return JsonResponse::create([</span><br><span class="line">            &apos;message&apos; =&gt; $this-&gt;getMessage(),</span><br><span class="line">            &apos;errorCode&apos; =&gt; $this-&gt;getErrorCode(),</span><br><span class="line">            &apos;data&apos; =&gt; $this-&gt;getData(),</span><br><span class="line">            &apos;requestUrl&apos; =&gt; $this-&gt;getEvent()-&gt;getRequest()-&gt;getPathInfo()</span><br><span class="line">        ], $this-&gt;getStatusCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...getter or setter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上的代码我们捕获了所有的异常，并且如果是继承自<code>App\Exception\Base</code>异常的话能够很有好的返回json数据，其中包括了</p>
<ul>
<li><code>status</code>-http状态码</li>
<li><code>message</code>-异常消息</li>
<li><code>errorCode</code>-自定义错误码</li>
<li><code>data</code>-返回数据</li>
<li><code>requestUrl</code>-当前请求接口</li>
</ul>
<p>能够应付大部分场景，如果你觉得还不够的话，可以补充。</p>
<h4 id="使用异常"><a href="#使用异常" class="headerlink" title="使用异常"></a>使用异常</h4><p>我们已经有了自定义的异常，我们怎么来使用它呢？</p>
<p>我们首先定义一个参数异常类<code>App\Exception\Parameter</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\Exception;</span><br><span class="line"></span><br><span class="line">class Parameter extends Base</span><br><span class="line">&#123;</span><br><span class="line">    protected $status = 400;</span><br><span class="line">    protected $errorCode = 10000;</span><br><span class="line">    protected $message = &quot;参数错误&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>什么，才<code>10</code>行代码？没错，就是如此简单。</p>
<p>然后我们可以在控制器使用它了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// src/controll/Word</span><br><span class="line">namespace App\Controller;</span><br><span class="line"></span><br><span class="line">use App\Exception\Parameter;</span><br><span class="line">use Symfony\Component\HttpFoundation\Response;</span><br><span class="line">use Symfony\Component\Routing\Annotation\Route;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Route(&quot;/hello&quot;)</span><br><span class="line"> */</span><br><span class="line">class Word</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @Route(&quot;/word&quot;,methods=&#123;&quot;GET&quot;&#125;)</span><br><span class="line">     */</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        throw new \Exception(&apos;something was wrong!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @Route(&quot;/word&quot;,methods=&#123;&quot;POST&quot;&#125;)</span><br><span class="line">     */</span><br><span class="line">    public function custom()</span><br><span class="line">    &#123;</span><br><span class="line">        throw new Parameter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了避免重复，我们定义了另外一个路由<code>hello\word</code>，只不过请求方式换了<code>POST</code>而已。</p>
<h4 id="产品环境下的500异常"><a href="#产品环境下的500异常" class="headerlink" title="产品环境下的500异常"></a>产品环境下的500异常</h4><p>如上，你已经自定义了异常处理了，但是细心的同学可能发现了，我们的抛出<code>Exception</code>的时候，还是是由框架渲染的，在产品环境下，我们不希望用户看到这些异常。</p>
<p>所以，我们只需要在产品环境下让框架的异常正常返回就可以了。为此我们需要拿到配置环境的值。<br>在<code>config/services.yaml</code>下加入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># design exception handler</span><br><span class="line">App\EventListener\Exception:</span><br><span class="line">    tags:</span><br><span class="line">        - &#123; name: kernel.event_listener, event: kernel.exception &#125;</span><br><span class="line">+        arguments:</span><br><span class="line">+            $debug: &apos;%kernel.debug%&apos;</span><br></pre></td></tr></table></figure>

<p>这样我们拿到了配置<code>debug</code>的值。异常处理就容易了。</p>
<p>至此，完整的<code>App\EventListener\Exception</code>类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace App\EventListener;</span><br><span class="line"></span><br><span class="line">use App\Exception\Base;</span><br><span class="line">use Symfony\Component\HttpFoundation\JsonResponse;</span><br><span class="line">use Symfony\Component\HttpKernel\Event\ExceptionEvent;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Class Exception</span><br><span class="line"> * @package App\EventListener</span><br><span class="line"> */</span><br><span class="line">class Exception</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @var</span><br><span class="line">     */</span><br><span class="line">    private $debug;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @var</span><br><span class="line">     */</span><br><span class="line">    private $event;</span><br><span class="line">    /**</span><br><span class="line">     * @var int</span><br><span class="line">     */</span><br><span class="line">    private $statusCode = 500;</span><br><span class="line">    /**</span><br><span class="line">     * @var int</span><br><span class="line">     */</span><br><span class="line">    private $errorCode = 999;</span><br><span class="line">    /**</span><br><span class="line">     * @var string</span><br><span class="line">     */</span><br><span class="line">    private $message = &apos;服务器异常&apos;;</span><br><span class="line">    /**</span><br><span class="line">     * @var array</span><br><span class="line">     */</span><br><span class="line">    private $data = [];</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * ExceptionListener constructor.</span><br><span class="line">     * @param $debug</span><br><span class="line">     */</span><br><span class="line">    public function __construct ($debug) &#123;</span><br><span class="line">        $this-&gt;debug = $debug;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param ExceptionEvent $event</span><br><span class="line">     * @return ExceptionEvent</span><br><span class="line">     */</span><br><span class="line">    public function onKernelException(ExceptionEvent $event)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;setEvent($event);</span><br><span class="line">        $exception = $event-&gt;getException();</span><br><span class="line">        if ($exception instanceof Base) &#123;</span><br><span class="line">            $this-&gt;setData($exception-&gt;getData());</span><br><span class="line">            $this-&gt;setMessage($exception-&gt;getMessage());</span><br><span class="line">            $this-&gt;setErrorCode($exception-&gt;getErrorCode());</span><br><span class="line">            $this-&gt;setStatusCode($exception-&gt;getStatus());</span><br><span class="line"></span><br><span class="line">            $event-&gt;setResponse($this-&gt;createJsonResponse());</span><br><span class="line">            return $event;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if ($this-&gt;debug) &#123;</span><br><span class="line">            return $event;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // do something else ...</span><br><span class="line">        $event-&gt;setResponse($this-&gt;createJsonResponse());</span><br><span class="line">        return $event;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @return JsonResponse</span><br><span class="line">     */</span><br><span class="line">    private function createJsonResponse ()</span><br><span class="line">    &#123;</span><br><span class="line">        return JsonResponse::create([</span><br><span class="line">            &apos;message&apos;    =&gt; $this-&gt;getMessage(),</span><br><span class="line">            &apos;errorCode&apos;  =&gt; $this-&gt;getErrorCode(),</span><br><span class="line">            &apos;data&apos;       =&gt; $this-&gt;getData(),</span><br><span class="line">            &apos;requestUrl&apos; =&gt; $this-&gt;getEvent()-&gt;getRequest()-&gt;getPathInfo()</span><br><span class="line">        ], $this-&gt;getStatusCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上，我们已经完成了最复杂的一层构建。接下来我们来实现数据的校验层吧。</p>
<p><strong>enjoy and happy coding!</strong></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>restful</tag>
        <tag>symfony</tag>
      </tags>
  </entry>
  <entry>
    <title>使用symfony构建restful应用 - 项目初始化</title>
    <url>/2019/09/19/symfony-init/</url>
    <content><![CDATA[<h4 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h4><blockquote>
<p>使用symfony构建一个api基础接口</p>
</blockquote>
<a id="more"></a>

<h4 id="新建一个symfony应用"><a href="#新建一个symfony应用" class="headerlink" title="新建一个symfony应用"></a>新建一个symfony应用</h4><p>下载symfony：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer create-project symfony/skeleton my_project_name</span><br></pre></td></tr></table></figure>

<p>然后把你配置的域名指向项目的<code>public</code>下面就可以用域名访问了。</p>
<!--more-->

<blockquote>
<p>如果你是apache环境记得重写url</p>
</blockquote>
<p>如果你看了<span class="exturl" data-url="aHR0cHM6Ly9zeW1mb255LmNvbS9kb2MvY3VycmVudC9zZXR1cC5odG1s" title="官方文档">官方文档:set_up<i class="fa fa-external-link"></i></span>的话，你可能会运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symfony server:start</span><br></pre></td></tr></table></figure>

<p>或者是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php bin/console server:run</span><br></pre></td></tr></table></figure>

<p>但是你会发现报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[InvalidArgumentException]</span><br><span class="line">There are no commands defined in the &quot;server&quot; namespace</span><br></pre></td></tr></table></figure>

<p>这是因为没有<code>WebServerBundle</code>的缘故，安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer require --dev symfony/web-server-bundle</span><br></pre></td></tr></table></figure>

<p>然后用浏览器打开<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAw" title="127.0.0.1:8000">127.0.0.1:8000<i class="fa fa-external-link"></i></span>就可以看见默认页面了。</p>
<h4 id="创建第一个路由"><a href="#创建第一个路由" class="headerlink" title="创建第一个路由"></a>创建第一个路由</h4><p><strong>symfony</strong>配置路由的方式比较灵活。这里主要介绍两种简单的方式。</p>
<h5 id="在路由配置中配置路由"><a href="#在路由配置中配置路由" class="headerlink" title="在路由配置中配置路由"></a>在路由配置中配置路由</h5><p>在<code>config/routes.yaml</code> 添加一下配置（<em>假设你的控制器<code>src/controll/Word</code></em>）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index:</span><br><span class="line">    path: /hello/word</span><br><span class="line">    controller: App\Controller\Word::index</span><br></pre></td></tr></table></figure>

<p>控制器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// src/controll/Word</span><br><span class="line">namespace App\Controller;</span><br><span class="line"></span><br><span class="line">use Symfony\Component\HttpFoundation\Response;</span><br><span class="line"></span><br><span class="line">class Word</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $number = random_int(0, 100);</span><br><span class="line"></span><br><span class="line">        return new Response(</span><br><span class="line">            &apos;&lt;html&gt;&lt;body&gt;Hello word: &apos;.$number.&apos;&lt;/body&gt;&lt;/html&gt;&apos;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在路由<code>hello\word</code>下面就可以看到你的返回页面了。</p>
<h4 id="使用注解路由"><a href="#使用注解路由" class="headerlink" title="使用注解路由"></a>使用注解路由</h4><p>这种方式比较灵活，也是我个人比较推荐的路由注册方式，它直接作用于控制器的注解之中。<br>当然，它额外的需要你有<code>annotations</code>组件。安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">composer require annotations</span><br></pre></td></tr></table></figure>

<p>使用注解路由，我们可以把控制器改写成这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// src/controll/Word</span><br><span class="line">namespace App\Controller;</span><br><span class="line"></span><br><span class="line">use Symfony\Component\HttpFoundation\Response;</span><br><span class="line">+  use Symfony\Component\Routing\Annotation\Route;</span><br><span class="line"></span><br><span class="line">+     /**</span><br><span class="line">+      * @Route(&quot;/hello&quot;)</span><br><span class="line">+      */</span><br><span class="line">class Word</span><br><span class="line">&#123;</span><br><span class="line">+     /**</span><br><span class="line">+      * @Route(&quot;/word&quot;,methods=&#123;&quot;GET&quot;&#125;)</span><br><span class="line">+      */</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $number = random_int(0, 100);</span><br><span class="line"></span><br><span class="line">        return new Response(</span><br><span class="line">            &apos;&lt;html&gt;&lt;body&gt;Hello word: &apos;.$number.&apos;&lt;/body&gt;&lt;/html&gt;&apos;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与此同时我们可以把刚才在<code>config/routes.yaml</code>添加的路由<code>hello\word</code>删除掉了。<br>其中<code>methods</code>参数标识这个接口的请求方式，甚至可以指定多个请求方式如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Route(&quot;/word&quot;,methods=&#123;&quot;GET&quot;,&quot;HEAD&quot;&#125;)</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<h4 id="查看路由"><a href="#查看路由" class="headerlink" title="查看路由"></a>查看路由</h4><p>输入以下命令即可查看已经注册的路由：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php bin/console debug:router</span><br></pre></td></tr></table></figure>

<p>更多信息请查看<span class="exturl" data-url="aHR0cHM6Ly9zeW1mb255LmNvbS9kb2MvY3VycmVudC9jb21wb25lbnRzL3JvdXRpbmcuaHRtbA==" title="The Routing Component">The Routing Component<i class="fa fa-external-link"></i></span></p>
<p><strong>enjoy and happy coding!</strong></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>restful</tag>
        <tag>symfony</tag>
      </tags>
  </entry>
  <entry>
    <title>记markdown语法</title>
    <url>/2019/06/28/markdown/</url>
    <content><![CDATA[<p>记一些学习markdown的资料</p>
<a id="more"></a>

<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题的语法： <code>#</code>，标题的数量代表级别(如：<code>##</code>代表二级标题)，你可以类比<code>html</code>里面的<code>h1~h6</code>.
示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#一级标题</span><br><span class="line">##二级标题</span><br><span class="line">###三级标题</span><br><span class="line">####四级标题</span><br><span class="line">#####五级标题</span><br><span class="line">######六级标题</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<blockquote>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote>
<hr>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul>
<li><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4>在你要倾斜的字体左右用一个<code>*</code>包起来;</li>
<li><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4>在你要加粗的字体左右用两个<code>*</code>包起来;</li>
<li><h4 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h4>没错，用三个<code>*</code>包起来的字体即可斜体加粗;</li>
<li><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4>在你要删除线的字体左右用两个<code>~</code>包起来;</li>
</ul>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是**加粗**，这是*斜体*，***斜体加粗***，以及~~删除线~~</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<blockquote>
<p>这是<strong>加粗</strong>，这是<em>斜体</em>，<strong><em>斜体加粗</em></strong>，以及<del>删除线</del></p>
</blockquote>
<hr>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在你要引用的文字前加<code>&gt;</code>即可；</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;引用一</span><br><span class="line">&gt;&gt;引用二</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;引用n</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<blockquote>
<p>引用一</p>
<blockquote>
<p>引用二</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>引用n</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<hr>
<h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>用三个（或更多）<code>*</code>或者<code>-</code></p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">****</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<hr>
<hr>
<hr>
<hr>
<h4 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h4><p>链接语法：<code>[链接名](链接 &quot;链接title&quot;)</code><br>图片语法：<code>![图片alt](图片地址 &quot;图片title&quot;)</code></p>
<blockquote>
<p><strong><em>注意：中间有一个空格</em></strong></p>
</blockquote>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[才先の博客](https://jaychoumylove.github.io &quot;才先の博客&quot;)</span><br><span class="line">![这里是alt](https://jaychoumylove.github.io/images/avatar.gif &quot;这里是title&quot;)</span><br></pre></td></tr></table></figure>

<p>效果：<br><a href="https://jaychoumylove.github.io" title="才先の博客">才先の博客</a><br><img src="/images/avatar.gif" alt="这里是alt" title="这里是title"></p>
<hr>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p><strong>无序列表</strong>用 <code>-</code> <code>+</code> <code>*</code> 任何一种都可以，可以在列表后加<code>[]</code>标识是否勾选（<em>注意空格</em>）等</p>
<blockquote>
<p>注意 <code>*</code> <code>+</code> <code>-</code> 与内容之间要有一个空格</p>
</blockquote>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 1</span><br><span class="line">- 2</span><br><span class="line">- 3</span><br><span class="line"></span><br><span class="line">+ a</span><br><span class="line">+ b</span><br><span class="line">+ c</span><br><span class="line"></span><br><span class="line">* [ ]  A </span><br><span class="line">* [ ]  B </span><br><span class="line">* [x]  C</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<blockquote>
<ul>
<li>1</li>
<li>2</li>
<li>3</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>a</li>
<li>b</li>
<li>c</li>
</ul>
</blockquote>
<ul>
<li><input disabled type="checkbox"> A</li>
<li><input disabled type="checkbox"> B</li>
<li><input checked disabled type="checkbox"> C</li>
</ul>
<p><strong>有序列表</strong>的语法是数字加点</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. A</span><br><span class="line">2. B</span><br><span class="line">3. C</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<blockquote>
<ol>
<li>A</li>
<li>B</li>
<li>C</li>
</ol>
</blockquote>
<p><strong>列表嵌套</strong><br>如果想要列表嵌套的话，上一级和下一级之间要有三个空格</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 1</span><br><span class="line">   1. A</span><br><span class="line">      + a</span><br><span class="line">         * 45</span><br><span class="line">         * 23</span><br><span class="line">         * 8989</span><br><span class="line">      + b</span><br><span class="line">   2. B</span><br><span class="line">      * !</span><br><span class="line">      * @</span><br><span class="line">- 2</span><br><span class="line">- 3</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<blockquote>
<ul>
<li>1<ol>
<li>A<ul>
<li>a<ul>
<li>45</li>
<li>23</li>
<li>8989</li>
</ul>
</li>
<li>b</li>
</ul>
</li>
<li>B<ul>
<li>!</li>
<li>@</li>
</ul>
</li>
</ol>
</li>
<li>2</li>
<li>3</li>
</ul>
</blockquote>
<hr>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>这个解释比较麻烦，直接上示例吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|这是你的表头|表头|表头|</span><br><span class="line">|---|:---:|---:|</span><br><span class="line">|这是你的内容|内容|内容|</span><br><span class="line">|我是居左的|我是居中的|我是居右的|</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<table>
<thead>
<tr>
<th>这是你的表头</th>
<th align="center">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td>这是你的内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
<tr>
<td>我是居左的</td>
<td align="center">我是居中的</td>
<td align="right">我是居右的</td>
</tr>
</tbody></table>
<hr>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>语法：用反引号把你的代码包起来,单行代码用一个即可，代码块用三个</p>
<blockquote>
<p><em>注意，以下示例为了防止转义将反引号用()包起来了，实际上是没有的</em></p>
</blockquote>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(`) create user page (`) </span><br><span class="line"></span><br><span class="line">(```)</span><br><span class="line">function foo() &#123;</span><br><span class="line">    return &quot;bar&quot;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><code>create user page</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">    return &quot;bar&quot;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>MarkDown</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
</search>
